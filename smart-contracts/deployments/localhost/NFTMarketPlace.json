{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAdress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "AlreadyListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MarketPlaceNotApproved",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "NoProceeds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NotListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyOwnerCanListItems",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "PriceNotMet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceTooLow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "Itembought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ListingDeleted",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getListing",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            }
          ],
          "internalType": "struct NFTMarketPlace.Listing",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "getProceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "updateListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProceeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa21abf939cb7401febe685aebaa074d0650447e935027a46266e3965cc24aa76",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1186430",
    "logsBloom": "0x
    "blockHash": "0xeac5e6e51f8f869f826139282cf97ab0fc3febe8c1fb611cf4179c5505b69e89",
    "transactionHash": "0xa21abf939cb7401febe685aebaa074d0650447e935027a46266e3965cc24aa76",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1186430",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0d92ca011b3aee8ab4bdc91f2f0c8c04",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAdress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AlreadyListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketPlaceNotApproved\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NoProceeds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOwnerCanListItems\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"PriceNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceTooLow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"Itembought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ListingDeleted\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct NFTMarketPlace.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTMarketPlace.sol\":\"NFTMarketPlace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NFTMarketPlace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\nerror PriceTooLow();\\r\\nerror MarketPlaceNotApproved();\\r\\nerror AlreadyListed(address nftAdress, uint256 tokenId);\\r\\nerror OnlyOwnerCanListItems();\\r\\nerror NotListed(address nftAddress, uint256 tokenId);\\r\\nerror PriceNotMet(address nftAddress, uint256 tokenId);\\r\\nerror NoProceeds(address sender);\\r\\n\\r\\ncontract NFTMarketPlace {\\r\\n    struct Listing {\\r\\n        uint256 price;\\r\\n        address seller;\\r\\n    }\\r\\n    //state variables\\r\\n    mapping(address => mapping(uint256 => Listing)) private s_listings;\\r\\n    mapping(address => uint256) private s_proceeds;\\r\\n\\r\\n    //modifiers\\r\\n    modifier notListed(address nftAddress, uint256 tokenId) {\\r\\n        if (s_listings[nftAddress][tokenId].price > 0) {\\r\\n            revert AlreadyListed(nftAddress, tokenId);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isListed(address nftAddress, uint256 tokenId) {\\r\\n        if (s_listings[nftAddress][tokenId].price == 0) {\\r\\n            revert NotListed(nftAddress, tokenId);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner(\\r\\n        address nftAddress,\\r\\n        uint256 tokenId,\\r\\n        address sender\\r\\n    ) {\\r\\n        IERC721 nft = IERC721(nftAddress);\\r\\n        address owner = nft.ownerOf(tokenId);\\r\\n\\r\\n        if (owner != sender) {\\r\\n            revert OnlyOwnerCanListItems();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    //events\\r\\n    event ItemListed(address nftAddress, uint256 tokenId, uint256 price);\\r\\n    event Itembought(\\r\\n        address nftAddress,\\r\\n        uint256 tokenId,\\r\\n        address buyer,\\r\\n        address seller\\r\\n    );\\r\\n    event ListingDeleted(address nftAddress, uint256 tokenId);\\r\\n\\r\\n    //------------MAIN FUNCTIONS-----------//\\r\\n    function listItem(\\r\\n        address nftAddress,\\r\\n        uint256 tokenId,\\r\\n        uint256 price\\r\\n    )\\r\\n        external\\r\\n        notListed(nftAddress, tokenId)\\r\\n        onlyOwner(nftAddress, tokenId, msg.sender)\\r\\n    {\\r\\n        if (price <= 0) {\\r\\n            revert PriceTooLow();\\r\\n        }\\r\\n        IERC721 nft = IERC721(nftAddress);\\r\\n        if (nft.getApproved(tokenId) != address(this)) {\\r\\n            revert MarketPlaceNotApproved();\\r\\n        }\\r\\n        s_listings[nftAddress][tokenId] = Listing(price, msg.sender);\\r\\n        emit ItemListed(nftAddress, tokenId, price);\\r\\n    }\\r\\n\\r\\n    function buyItem(\\r\\n        address nftAddress,\\r\\n        uint256 tokenId\\r\\n    ) external payable isListed(nftAddress, tokenId) {\\r\\n        Listing memory listedItem = s_listings[nftAddress][tokenId];\\r\\n        if (listedItem.price > msg.value) {\\r\\n            revert PriceNotMet(nftAddress, tokenId);\\r\\n        }\\r\\n\\r\\n        s_proceeds[listedItem.seller] += msg.value;\\r\\n        delete (s_listings[nftAddress][tokenId]);\\r\\n\\r\\n        IERC721 nft = IERC721(nftAddress);\\r\\n        nft.safeTransferFrom(listedItem.seller, msg.sender, tokenId);\\r\\n        emit Itembought(nftAddress, tokenId, msg.sender, listedItem.seller);\\r\\n    }\\r\\n\\r\\n    function cancelListing(\\r\\n        address nftAddress,\\r\\n        uint256 tokenId\\r\\n    )\\r\\n        external\\r\\n        isListed(nftAddress, tokenId)\\r\\n        onlyOwner(nftAddress, tokenId, msg.sender)\\r\\n    {\\r\\n        delete (s_listings[nftAddress][tokenId]);\\r\\n        emit ListingDeleted(nftAddress, tokenId);\\r\\n    }\\r\\n\\r\\n    function updateListing(\\r\\n        address nftAddress,\\r\\n        uint256 tokenId,\\r\\n        uint256 newPrice\\r\\n    )\\r\\n        external\\r\\n        isListed(nftAddress, tokenId)\\r\\n        onlyOwner(nftAddress, tokenId, msg.sender)\\r\\n    {\\r\\n        if (newPrice <= 0) {\\r\\n            revert PriceTooLow();\\r\\n        }\\r\\n        s_listings[nftAddress][tokenId].price = newPrice;\\r\\n        emit ItemListed(nftAddress, tokenId, newPrice);\\r\\n    }\\r\\n\\r\\n    function withdrawProceeds() external {\\r\\n        uint256 proceeds = s_proceeds[msg.sender];\\r\\n        if (proceeds <= 0) {\\r\\n            revert NoProceeds(msg.sender);\\r\\n        }\\r\\n        s_proceeds[msg.sender] = 0;\\r\\n        (bool success, ) = payable(msg.sender).call{value: proceeds}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    //-------------GETTERS--------------//\\r\\n    function getListing(\\r\\n        address nftAddress,\\r\\n        uint256 tokenId\\r\\n    ) external view returns (Listing memory) {\\r\\n        return s_listings[nftAddress][tokenId];\\r\\n    }\\r\\n\\r\\n    function getProceeds(address seller) external view returns (uint256) {\\r\\n        return s_proceeds[seller];\\r\\n    }\\r\\n\\r\\n    // * receive function\\r\\n    receive() external payable {}\\r\\n\\r\\n    // * fallback function\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0xbb9285db6eefdbe6287463a501130871af4ccdf7d27eb63903f6b3fdc241af09\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611498806100206000396000f3fe6080604052600436106100745760003560e01c80639038e6931161004e5780639038e693146101205780639f37092a14610137578063b2ddee0614610153578063f772adf11461017c5761007b565b806330cfeda91461007d57806388700d1c146100ba57806389bfd38f146100f75761007b565b3661007b57005b005b34801561008957600080fd5b506100a4600480360381019061009f919061106c565b6101a5565b6040516100b191906110b2565b60405180910390f35b3480156100c657600080fd5b506100e160048036038101906100dc91906110f9565b6101ee565b6040516100ee9190611186565b60405180910390f35b34801561010357600080fd5b5061011e600480360381019061011991906111a1565b6102b8565b005b34801561012c57600080fd5b50610135610672565b005b610151600480360381019061014c91906110f9565b6107f0565b005b34801561015f57600080fd5b5061017a600480360381019061017591906110f9565b610b30565b005b34801561018857600080fd5b506101a3600480360381019061019e91906111a1565b610d7b565b005b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6101f6610fd9565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b828260008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000015411156103545781816040517f4a5568d500000000000000000000000000000000000000000000000000000000815260040161034b929190611203565b60405180910390fd5b848433600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161039791906110b2565b602060405180830381865afa1580156103b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d89190611241565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461043f576040517f78448ad300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008811610479576040517fdbbbe82200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008a90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8c6040518263ffffffff1660e01b81526004016104ce91906110b2565b602060405180830381865afa1580156104eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050f9190611241565b73ffffffffffffffffffffffffffffffffffffffff161461055c576040517f488ff20a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808a81526020013373ffffffffffffffffffffffffffffffffffffffff168152506000808d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507f94e7b934c857a9e3202e8ed9c1f3f96e396b7d2b5885930d2001abcb51ff58fa8b8b8b60405161065d9392919061126e565b60405180910390a15050505050505050505050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116106fb57336040517fe5eded920000000000000000000000000000000000000000000000000000000081526004016106f291906112a5565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff1682604051610766906112f1565b60006040518083038185875af1925050503d80600081146107a3576040519150601f19603f3d011682016040523d82523d6000602084013e6107a8565b606091505b50509050806107ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e390611363565b60405180910390fd5b5050565b818160008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600001540361088b5781816040517f6831488c000000000000000000000000000000000000000000000000000000008152600401610882929190611203565b60405180910390fd5b60008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905034816000015111156109945784846040517f9c55559900000000000000000000000000000000000000000000000000000000815260040161098b929190611203565b60405180910390fd5b3460016000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109e791906113b2565b925050819055506000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055505060008590508073ffffffffffffffffffffffffffffffffffffffff166342842e0e836020015133886040518463ffffffff1660e01b8152600401610ab5939291906113e6565b600060405180830381600087803b158015610acf57600080fd5b505af1158015610ae3573d6000803e3d6000fd5b505050507f50a31d904d7c28c88de40b95dd07a23add6a9c096fc9409e8d9e54da6c6e549b8686338560200151604051610b20949392919061141d565b60405180910390a1505050505050565b818160008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000015403610bcb5781816040517f6831488c000000000000000000000000000000000000000000000000000000008152600401610bc2929190611203565b60405180910390fd5b838333600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610c0e91906110b2565b602060405180830381865afa158015610c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4f9190611241565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610cb6576040517f78448ad300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008981526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550507f53df6f80c006573b58e17d6440b870b40592881a21c175cde20004a4135dd4608989604051610d68929190611203565b60405180910390a1505050505050505050565b828260008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000015403610e165781816040517f6831488c000000000000000000000000000000000000000000000000000000008152600401610e0d929190611203565b60405180910390fd5b848433600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610e5991906110b2565b602060405180830381865afa158015610e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9a9190611241565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610f01576040517f78448ad300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008811610f3b576040517fdbbbe82200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b876000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b8152602001908152602001600020600001819055507f94e7b934c857a9e3202e8ed9c1f3f96e396b7d2b5885930d2001abcb51ff58fa8a8a8a604051610fc59392919061126e565b60405180910390a150505050505050505050565b604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110398261100e565b9050919050565b6110498161102e565b811461105457600080fd5b50565b60008135905061106681611040565b92915050565b60006020828403121561108257611081611009565b5b600061109084828501611057565b91505092915050565b6000819050919050565b6110ac81611099565b82525050565b60006020820190506110c760008301846110a3565b92915050565b6110d681611099565b81146110e157600080fd5b50565b6000813590506110f3816110cd565b92915050565b600080604083850312156111105761110f611009565b5b600061111e85828601611057565b925050602061112f858286016110e4565b9150509250929050565b61114281611099565b82525050565b6111518161102e565b82525050565b60408201600082015161116d6000850182611139565b5060208201516111806020850182611148565b50505050565b600060408201905061119b6000830184611157565b92915050565b6000806000606084860312156111ba576111b9611009565b5b60006111c886828701611057565b93505060206111d9868287016110e4565b92505060406111ea868287016110e4565b9150509250925092565b6111fd8161102e565b82525050565b600060408201905061121860008301856111f4565b61122560208301846110a3565b9392505050565b60008151905061123b81611040565b92915050565b60006020828403121561125757611256611009565b5b60006112658482850161122c565b91505092915050565b600060608201905061128360008301866111f4565b61129060208301856110a3565b61129d60408301846110a3565b949350505050565b60006020820190506112ba60008301846111f4565b92915050565b600081905092915050565b50565b60006112db6000836112c0565b91506112e6826112cb565b600082019050919050565b60006112fc826112ce565b9150819050919050565b600082825260208201905092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b600061134d600f83611306565b915061135882611317565b602082019050919050565b6000602082019050818103600083015261137c81611340565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113bd82611099565b91506113c883611099565b92508282019050808211156113e0576113df611383565b5b92915050565b60006060820190506113fb60008301866111f4565b61140860208301856111f4565b61141560408301846110a3565b949350505050565b600060808201905061143260008301876111f4565b61143f60208301866110a3565b61144c60408301856111f4565b61145960608301846111f4565b9594505050505056fea2646970667358221220f4c51308674febc3834b209a923e2bec7c1e25f60e1faeefc1249fb166385dfe64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c80639038e6931161004e5780639038e693146101205780639f37092a14610137578063b2ddee0614610153578063f772adf11461017c5761007b565b806330cfeda91461007d57806388700d1c146100ba57806389bfd38f146100f75761007b565b3661007b57005b005b34801561008957600080fd5b506100a4600480360381019061009f919061106c565b6101a5565b6040516100b191906110b2565b60405180910390f35b3480156100c657600080fd5b506100e160048036038101906100dc91906110f9565b6101ee565b6040516100ee9190611186565b60405180910390f35b34801561010357600080fd5b5061011e600480360381019061011991906111a1565b6102b8565b005b34801561012c57600080fd5b50610135610672565b005b610151600480360381019061014c91906110f9565b6107f0565b005b34801561015f57600080fd5b5061017a600480360381019061017591906110f9565b610b30565b005b34801561018857600080fd5b506101a3600480360381019061019e91906111a1565b610d7b565b005b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6101f6610fd9565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b828260008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000015411156103545781816040517f4a5568d500000000000000000000000000000000000000000000000000000000815260040161034b929190611203565b60405180910390fd5b848433600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161039791906110b2565b602060405180830381865afa1580156103b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d89190611241565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461043f576040517f78448ad300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008811610479576040517fdbbbe82200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008a90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8c6040518263ffffffff1660e01b81526004016104ce91906110b2565b602060405180830381865afa1580156104eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050f9190611241565b73ffffffffffffffffffffffffffffffffffffffff161461055c576040517f488ff20a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808a81526020013373ffffffffffffffffffffffffffffffffffffffff168152506000808d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507f94e7b934c857a9e3202e8ed9c1f3f96e396b7d2b5885930d2001abcb51ff58fa8b8b8b60405161065d9392919061126e565b60405180910390a15050505050505050505050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116106fb57336040517fe5eded920000000000000000000000000000000000000000000000000000000081526004016106f291906112a5565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff1682604051610766906112f1565b60006040518083038185875af1925050503d80600081146107a3576040519150601f19603f3d011682016040523d82523d6000602084013e6107a8565b606091505b50509050806107ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e390611363565b60405180910390fd5b5050565b818160008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600001540361088b5781816040517f6831488c000000000000000000000000000000000000000000000000000000008152600401610882929190611203565b60405180910390fd5b60008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905034816000015111156109945784846040517f9c55559900000000000000000000000000000000000000000000000000000000815260040161098b929190611203565b60405180910390fd5b3460016000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109e791906113b2565b925050819055506000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055505060008590508073ffffffffffffffffffffffffffffffffffffffff166342842e0e836020015133886040518463ffffffff1660e01b8152600401610ab5939291906113e6565b600060405180830381600087803b158015610acf57600080fd5b505af1158015610ae3573d6000803e3d6000fd5b505050507f50a31d904d7c28c88de40b95dd07a23add6a9c096fc9409e8d9e54da6c6e549b8686338560200151604051610b20949392919061141d565b60405180910390a1505050505050565b818160008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000015403610bcb5781816040517f6831488c000000000000000000000000000000000000000000000000000000008152600401610bc2929190611203565b60405180910390fd5b838333600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610c0e91906110b2565b602060405180830381865afa158015610c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4f9190611241565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610cb6576040517f78448ad300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008981526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550507f53df6f80c006573b58e17d6440b870b40592881a21c175cde20004a4135dd4608989604051610d68929190611203565b60405180910390a1505050505050505050565b828260008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000015403610e165781816040517f6831488c000000000000000000000000000000000000000000000000000000008152600401610e0d929190611203565b60405180910390fd5b848433600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610e5991906110b2565b602060405180830381865afa158015610e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9a9190611241565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610f01576040517f78448ad300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008811610f3b576040517fdbbbe82200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b876000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b8152602001908152602001600020600001819055507f94e7b934c857a9e3202e8ed9c1f3f96e396b7d2b5885930d2001abcb51ff58fa8a8a8a604051610fc59392919061126e565b60405180910390a150505050505050505050565b604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110398261100e565b9050919050565b6110498161102e565b811461105457600080fd5b50565b60008135905061106681611040565b92915050565b60006020828403121561108257611081611009565b5b600061109084828501611057565b91505092915050565b6000819050919050565b6110ac81611099565b82525050565b60006020820190506110c760008301846110a3565b92915050565b6110d681611099565b81146110e157600080fd5b50565b6000813590506110f3816110cd565b92915050565b600080604083850312156111105761110f611009565b5b600061111e85828601611057565b925050602061112f858286016110e4565b9150509250929050565b61114281611099565b82525050565b6111518161102e565b82525050565b60408201600082015161116d6000850182611139565b5060208201516111806020850182611148565b50505050565b600060408201905061119b6000830184611157565b92915050565b6000806000606084860312156111ba576111b9611009565b5b60006111c886828701611057565b93505060206111d9868287016110e4565b92505060406111ea868287016110e4565b9150509250925092565b6111fd8161102e565b82525050565b600060408201905061121860008301856111f4565b61122560208301846110a3565b9392505050565b60008151905061123b81611040565b92915050565b60006020828403121561125757611256611009565b5b60006112658482850161122c565b91505092915050565b600060608201905061128360008301866111f4565b61129060208301856110a3565b61129d60408301846110a3565b949350505050565b60006020820190506112ba60008301846111f4565b92915050565b600081905092915050565b50565b60006112db6000836112c0565b91506112e6826112cb565b600082019050919050565b60006112fc826112ce565b9150819050919050565b600082825260208201905092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b600061134d600f83611306565b915061135882611317565b602082019050919050565b6000602082019050818103600083015261137c81611340565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113bd82611099565b91506113c883611099565b92508282019050808211156113e0576113df611383565b5b92915050565b60006060820190506113fb60008301866111f4565b61140860208301856111f4565b61141560408301846110a3565b949350505050565b600060808201905061143260008301876111f4565b61143f60208301866110a3565b61144c60408301856111f4565b61145960608301846111f4565b9594505050505056fea2646970667358221220f4c51308674febc3834b209a923e2bec7c1e25f60e1faeefc1249fb166385dfe64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2718,
        "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
        "label": "s_listings",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)2711_storage))"
      },
      {
        "astId": 2722,
        "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
        "label": "s_proceeds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)2711_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NFTMarketPlace.Listing))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Listing)2711_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Listing)2711_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTMarketPlace.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)2711_storage"
      },
      "t_struct(Listing)2711_storage": {
        "encoding": "inplace",
        "label": "struct NFTMarketPlace.Listing",
        "members": [
          {
            "astId": 2708,
            "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2710,
            "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}